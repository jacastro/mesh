/**
 * Mesh
 * A tiny yet powerful grid system.
 */

// > Settings
// ---------------------------------------------------------------- //

$mesh: (
    properties: (
        columns: 12,
        gutter: 15px
    ),
    breakpoints: (
        smallest: (
            name: xxs,
            value: 0
        ),
        smaller: (
            name: xs,
            value: 320px
        ),
        small: (
            name: s,
            value: 480px
        ),
        medium: (
            name: m,
            value: 768px
        ),
        large: (
            name: l,
            value: 1024px
        ),
        larger: (
            name: xl,
            value: 1200px
        )
    )
) !default;

// >> Helper methods
// ------------------------------------------------------ //

// TODO: DRY methods!

@function get-mesh-property($property) {
    $context: map-get($mesh, properties);

    @if map-has-key($context, $property) {
        @return map-get($context, $property);
    } @else {
        @error 'The `#{$property}` key does not exist in `$mesh` map.';
    }
}

@function get-mesh-breakpoints() {
    @return map-keys(map-get($mesh, breakpoints));
}

@function get-mesh-breakpoint-name($breakpoint) {
    $context: map-get(map-get($mesh, breakpoints), $breakpoint);

    @if map-has-key($context, name) {
        @return map-get($context, name);
    } @else {
        @error 'The `#{$breakpoint}` key does not exist in `$mesh` map.';
    }
}

@function get-mesh-breakpoint-value($breakpoint) {
    $context: map-get(map-get($mesh, breakpoints), $breakpoint);

    @if map-has-key($context, value) {
        @return map-get($context, value);
    } @else {
        @error 'The `#{$breakpoint}` key does not exist in `$mesh` map.';
    }
}

// > Grid
// ---------------------------------------------------------------- //

.mh-grid {
    padding: 0;
    // Convert to negative value.
    margin: 0 (get-mesh-property(gutter) * -1);

    &:before,
    &:after {
        content: '';
        display: table;
    }

    &:after {
        clear: both;
    }
}

.mh-grid--no-gutter-correction {
    margin: 0;
}

// >> Cells
// ------------------------------------------------------ //

.mh-grid__cell {
    box-sizing: border-box;
    float: left;
    padding: 0 get-mesh-property(gutter);
    position: relative;
    width: 100%;
}

// TODO: DRY loops!
// TODO: consider adding `pull` and `push` classes.

// >>> Width-agnostic cells
// -------------------------------------------- //

@for $columns from 1 through get-mesh-property(columns) {
    .mh-grid__cell--#{$columns} {
        width: percentage($columns / get-mesh-property(columns));
    }
}

// >>> Responsive cells
// -------------------------------------------- //

@each $breakpoint in get-mesh-breakpoints() {
    @media only screen and (min-width: get-mesh-breakpoint-value($breakpoint)) {
        @for $columns from 1 through get-mesh-property(columns) {
            .mh-grid__cell--#{get-mesh-breakpoint-name($breakpoint)}-#{$columns} {
                width: percentage($columns / get-mesh-property(columns));
            }
        }
    }
}
