////
// Mesh
// A tiny yet powerful grid system

// > Settings
// ---------------------------------------------------------------- //

$mesh: (
    properties: (
        columns: 12,
        gutter: 15px
    ),
    breakpoints: (
        smallest: (
            name: xxs,
            value: 0
        ),
        smaller: (
            name: xs,
            value: 320px
        ),
        small: (
            name: s,
            value: 480px
        ),
        medium: (
            name: m,
            value: 768px
        ),
        large: (
            name: l,
            value: 1024px
        ),
        larger: (
            name: xl,
            value: 1200px
        )
    ),
    agnostic: (
        name: a
    )
) !default;

// >> Helper function
// ------------------------------------------------------ //

@function get-mesh-map($keys...) {
    $map: $mesh;

    @each $key in $keys {
        @if map-has-key($map, $key) {
            $map: map-get($map, $key);
        } @else {
            @error 'The `#{$key}` key does not exist in `$mesh` map.';
        }
    }

    @return $map;
}

// > Grid
// ---------------------------------------------------------------- //

.mh-grid {
    padding: 0;
    // Convert to negative value.
    margin: 0 (get-mesh-map(properties, gutter) * -1);

    &:before,
    &:after {
        content: '';
        display: table;
    }

    &:after {
        clear: both;
    }
}

.mh-grid--no-gutter-correction {
    margin: 0;
}

// >> Cells
// ------------------------------------------------------ //

.mh-grid__cell {
    box-sizing: border-box;
    float: left;
    padding: 0 get-mesh-map(properties, gutter);
    position: relative;
    width: 100%;
}

// >>> Width-agnostic cells
// -------------------------------------------- //

@for $columns from 1 through get-mesh-map(properties, columns) {
    .mh-grid__cell--#{get-mesh-map(agnostic, name)}-#{$columns} {
        width: percentage($columns / get-mesh-map(properties, columns));
    }
}

// >>> Responsive cells
// -------------------------------------------- //

@each $breakpoint in map-keys(get-mesh-map(breakpoints)) {
    @media only screen and (min-width: get-mesh-map(breakpoints, $breakpoint, value)) {
        @for $columns from 1 through get-mesh-map(properties, columns) {
            .mh-grid__cell--#{get-mesh-map(breakpoints, $breakpoint, name)}-#{$columns} {
                width: percentage($columns / get-mesh-map(properties, columns));
            }
        }
    }
}
